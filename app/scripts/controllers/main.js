'use strict';

/**
 * @ngdoc function
 * @name cdumpApp.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the cdumpApp
 */
angular.module('cdumpApp')
  .controller('MainCtrl', ['$scope', function ($scope) {
    $scope.parsedData = [
      {
        title: "How it works",
        desc: "You select the CSV file generated by Translink. Then, cdump will process it and tell you some useful and fun things about your transit usage. All of your data is kept entirely private and never leaves your computer.",
        items: [
        ]
      }
    ];
    $scope.parserHasRun = false;
    $scope.showSpinner = false;


    $scope.file_changed = function(element) {
      $scope.showSpinner = true;
      $scope.$apply();
      Papa.parse(element.files[0], {
        header: true,
        dynamicTyping: true,
        complete: function (results) {
          console.log(results);

          var data = results.data;

          //DECLARE TRACKERS
          var totalMoneySpent = 0;
          var totalTransactions = 0;
          var start = moment(data[0]['DateTime']);
          var last;
          var duration;
          var transactionsByType = {};
          var transactionsByLocation = {};

          for(var i = 0; i < data.length; i++){
            //UPDATE TRACKERS
            if(data[i]['Amount'] !== undefined) {

              totalMoneySpent += data[i]['Amount'];
              totalTransactions++;
              last = data[i]['DateTime'];

              // PARSE TRANSACTION STRING
              if(data[i]['Transaction'].indexOf(' at ') >= 0){
                var type = data[i]['Transaction'].split(' at ')[0].trim();
                if(transactionsByType[type] == null){
                  transactionsByType[type] = 0;
                }
                transactionsByType[type]++;

                var location = data[i]['Transaction'].split(' at ')[1].replace('Bus Stop', '').trim();

                if(location == 'W'){
                  console.log(data[i]['Transaction']);
                }

                if(transactionsByLocation[location] == null){
                  transactionsByLocation[location] = 0;
                }
                transactionsByLocation[location]++;
              }

            }
          }
          last = moment(last);
          console.log(transactionsByLocation);
          duration = moment.duration(start.diff(last));

          $scope.parsedData.length = 0;

          //TEMPLATE TRACKERS
          $scope.parsedData.push({
            title: "Total time",
            desc: 'To calculate averages, the total time of your compass card is used. To determine this, I calculate the time between first and last valid events in the CSV. If you started using your compass card a few months after the first event, you should generate a CSV that starts when you start actively using it.',
            items: [
              {
                title: "Most recent usage",
                value: start.fromNow()
              },
              {
                title: "Oldest usage",
                value: last.fromNow()
              },
              {
                title: "Total time used",
                value: duration.humanize()
              }
            ]
          });


          var template = [
            {
              title: "Total transactions",
              value: totalTransactions + " (~" + Math.round(totalTransactions / duration.asMonths()) + " a month/~" + Math.round(totalTransactions / duration.asWeeks()) + " a week/~" + Math.round(totalTransactions / duration.asDays()) + " a day)"
            }
          ];
          for (type in transactionsByType) {
            if (transactionsByType.hasOwnProperty(type)) {
              template.push({
                title: type,
                value: transactionsByType[type] + " (~" + Math.round(transactionsByType[type] / duration.asMonths()) + " a month)"
              })
            }
          }
          $scope.parsedData.push({
            title: "Transactions by type",
            desc: 'Translink\'s dumps are a list of transaction, these almost always follow a tap of your card. cdump dynamically detects transaction types.',
            items: template
          });

          var sortable = [];
          for (var stopId in transactionsByLocation)
            sortable.push([stopId, transactionsByLocation[stopId]])

          sortable.sort(function(a, b) {
            return b[1] - a[1]
          });

          var str = "";
          for(i = 0; i < Math.min(sortable.length, 9); i++){
            str += sortable[i][0] + "(" + sortable[i][1] + "), ";
          }
          str = str.trim().slice(0, -1);

          $scope.parsedData.push({
            title: "Transactions by location",
            desc: 'I have determined the location of each of your taps by parsing the "Transaction" field of each entry. Locations are either bus stops or stations. Bus stops are left as numerical ids.',
            items: [
              {
                title: 'Total unqiue stops',
                value: sortable.length
              },
              {
                title: 'Top 10 locations by amount of taps',
                value: str
              }
            ]
          });



          if(totalMoneySpent == 0) {
            $scope.parsedData.push({
              title: "Money Spent",
              desc: 'To calculate money spent, I take the sum of the "Amount" on all your taps.',
              items: [
                {
                  title: "Total money spent",
                  value: totalMoneySpent
                },
                {
                  title: "You spent no money in the time frame, so no further calculations were made."
                }
              ]
            });
          }
          else{
            $scope.parsedData.push({
              title: "Money Spent",
              desc: 'To calculate money spent, I take the sum of the "Amount" on all your taps.',
              items: [
                {
                  title: "Total money spent",
                  value: totalMoneySpent
                },
                {
                  title: "Money per month",
                  value: totalMoneySpent / duration.asMonths()
                },
                {
                  title: "Money per week",
                  value: totalMoneySpent / duration.asWeeks()
                },
                {
                  title: "Money per day",
                  value: totalMoneySpent / duration.asDays()
                }
              ]
            });
          }

          $scope.showSpinner = false;
          $scope.parserHasRun = true;
          $scope.$apply()
        }
      });
    };
  }]);
